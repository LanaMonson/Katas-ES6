// 48: Set - add
// To do: make all tests pass, leave the assert lines unchanged!
// Follow the hints of the failure messages!

describe('`add()` appends a new element to the end of a Set object.', function(){
  let set;
  beforeEach(() => set = new Set());
  it('adds every value, of any type, only once', function() {
    const fn = () => {};
    set.add(1);
    set.add(1);
    set.add(fn);
    set.add(fn);// by making (fn) identical on both lines we have 2 separate values
    assert.equal(set.size, 2);
  });
  it('is chainable', function() {
    set.add(1).add(2);// add must be function, must contain params a value or variable
    assert.equal(set.has(2), true);
  });
  it('call without params adds undefined', function() {
    set.add();// requires params
    assert.equal(set.has(void 0), true);
  });
  it('0, -0 and +0 are equal', function() {
    set.add(-0);
    set.add(0);
    assert.equal(set.has(+0), true);
  });
});
